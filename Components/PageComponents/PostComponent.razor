@using Services.Users
@using Services.Posts
@using Services.Tags
@using OPC5_Blogapp.Data.Models
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel.DataAnnotations.Schema
@inject IUserService userService
@inject IPostService postService
@inject ITagService tagService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager Navigate
@rendermode InteractiveServer

<form @onsubmit="HandlePost" class="dashboard-poster">
    <div>
        <div class="form-group">
            <label for="postContent" style="font-weight: bold;">Post Content</label>
            <textarea placeholder="Vad är det som händer?" id="postContent" class=" dashboard-poster-input" @bind="newPost.PostData"></textarea>
        </div>
        <div class="dashboard-tags-container">
            @foreach (var tag in tagsAvailable)
            {
                @if (tag.Value)
                {
                    <span @onclick="() => TagHandler(tag.Key)" class="badge tag dashboard-tag" style="background-color: #5195db; margin-right: 1%;">@tag.Key</span>
                }
                else
                {
                    <span @onclick="() => TagHandler(tag.Key)" class="badge tag dashboard-tag" style="background-color: #1C6EC2; margin-right: 1%;">@tag.Key</span>
                }
            }
        </div>
        <hr />
        <button style="margin-top: 15px;" type="submit" class="btn btn-primary dashboard-poster-button" disabled="@String.IsNullOrEmpty(newPost.PostData)">Gör ett inlägg</button>
    </div>
</form>

<style>
    .dashboard-poster {
        width: 100%;
        background-color: black;
        border: 0.5px solid grey;
        border-top: none;
        padding: 10px;

        /*margin-bottom: 5%;*/
    }

    .dashboard-poster-input {
        background-color: transparent;
        border: none;
        width: 90%;
        color: white;
        margin: 20px;
        resize: none;

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .dashboard-poster-input:hover {
        border: none;
        background-color: transparent;
    }

    .dashboard-poster-input:focus {
        border: none;
        outline: 0;
    }

    .dashboard-poster-button {
        margin-left: 70%;
        border-radius: 20px;
        font-weight: bold;
    }

    .dashboard-tags-container {
        user-select: none;
    }

    .dashboard-tag {
        cursor: pointer;
    }
</style>

@code {
    private User currentUser = new User();
    private Post newPost = new Post();
    private Dictionary<string, bool> tagsAvailable = new Dictionary<string, bool>(){ { "Work", false }, { "Programming", false }, { "Gaming", false } };

    [Parameter]
    public EventCallback ReloadPosts { get; set; }

    private async void HandlePost()
    {
        User? user = await sessionStorage.GetItemAsync<User>("userData");

        if (user != null)
        {
            /* Check if logged in, if not then redirect! */
            if (String.IsNullOrWhiteSpace(newPost.PostData) || String.IsNullOrEmpty(newPost.PostData))
            {
                Console.WriteLine("Returning since no message was entered.");
                StateHasChanged();

                return;
            }

            newPost.UserId = user.UserId;

            int? postId = postService.AddPost(newPost);
            newPost = new Post();

            if (postId != null)
            {
                foreach (var tag in tagsAvailable)
                {
                    if (tag.Value)
                    {
                        tagService.AddTag(new Tag() { TagName = tag.Key, PostId = (int)postId });
                    }
                }
            }

            foreach (var newTag in tagsAvailable)
            {
                tagsAvailable[newTag.Key] = false;
            }

            StateHasChanged();

            await ReloadPosts.InvokeAsync();
        } else
        {
            Navigate.NavigateTo("/login");
        }
    }

    private void TagHandler(string tag)
    {
        if (tagsAvailable.ContainsKey(tag))
        {
            bool currentValue = tagsAvailable[tag];

            if (currentValue)
            {
                tagsAvailable[tag] = false;
            } else
            {
                tagsAvailable[tag] = true;
            }
        }
    }
}

