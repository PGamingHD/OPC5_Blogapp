@using OPC5_Blogapp.Data.Models
@using Microsoft.AspNetCore.Authorization
@using Services.Posts
@using OPC5_Blogapp.Components;
@inject IPostService postService;
@inject ICommentService commentService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager Navigate
@inject ICommentService commentService

<!-- CommentComponent.razor -->
@code {
    private string commentText;
    private int postId;
    private User currentUser;
    private List<Comment> comments = new List<Comment>(); // Define comments variable

    [Parameter]
    public int PostId { get; set; }

    [Parameter]
    public EventCallback ReloadPosts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        postId = PostId;
        currentUser = await GetCurrentUser();
        comments = await GetPostComments(postId); // Initialize comments list
    }

    private async Task<User> GetCurrentUser()
    {
        return await sessionStorage.GetItemAsync<User>("userData");
    }

    private async Task<List<Comment>> GetPostComments(int postId)
    {
        try
        {
            // Retrieve all comments
            List<Comment> allComments = commentService.GetComments();

            // Filter comments based on the postId
            var postComments = allComments.Where(c => c.PostId == postId).ToList();

            return postComments;
        }
        catch (Exception ex)
        {
            // Handle any potential exceptions here
            Console.WriteLine($"Error fetching comments: {ex.Message}");
            return new List<Comment>(); // Return an empty list if an error occurs
        }
    }

    private async Task AddComment()
    {
        if (currentUser != null && !string.IsNullOrWhiteSpace(commentText))
        {
            Comment newComment = new Comment
                {
                    CommentText = commentText,
                    PostId = postId,
                    CommentUserUserId = currentUser.UserId
                };

            // Add the new comment to the database
            await commentService.AddComment(newComment);

            // Clear the comment text after adding
            commentText = "";

            // Refresh comments list
            comments = await GetPostComments(postId);

            await ReloadPosts.InvokeAsync();
        }
        else
        {
            Navigate.NavigateTo("/login");
        }
    }
}

<!-- Kommentarfält -->
<div class="comment-input">
    <textarea @bind="commentText" placeholder="Write a comment..."></textarea>
    <button @onclick="AddComment">Post</button>
</div>

<!-- Lista med kommentarer -->
<div class="comments-list">
    @foreach (var comment in comments)
    {
        @if (comment != null)
        {
            <div class="comment">
                @if (comment.CommentUser != null)
                {
                    <div class="user">@comment.CommentUser.Username</div>
                }
                <div class="text">@comment.CommentText</div>
            </div>
        }
    }
</div>

<style>
    body {
        background-color: black; /* Set the body background color to black */
    }

    .comment-input textarea {
        width: calc(100% - 40px); /* Adjust width to leave space for the button */
        min-height: 80px; /* Increase the minimum height of the textarea */
        padding: 10px;
        border: 1px solid #ccc; /* Add a border to the textarea */
        border-radius: 5px;
        resize: vertical;
        margin-bottom: 10px; /* Add some spacing between the textarea and button */
        background-color: black; /* Set the textarea background color to black */
        color: white; /* Set the text color to white */
    }

    .comment-input button {
        width: 100px; /* Adjust button width */
        display: inline-block; /* Ensure button and textarea are on the same line */
        background-color: #007bff;
        color: white;
        border: none;
        padding: 8px;
        border-radius: 5px;
        cursor: pointer;
    }

    .comment {
        background-color: #f5f8fa;
        border-radius: 8px;
        padding: 20px; /* Increased padding for the comment area */
        margin-bottom: 16px;
        height: auto; /* Set a fixed height for each comment */
        font-size: 16px; /* Adjust font size for better readability */
        background-color: black; /* Set the comment background color to black */
        color: white; /* Set the text color to white */
        width: calc(100% - 24px); /* Adjust width to fill the available space */
        margin-left: 0; /* Start the comment from the left side */
        border: 1px solid #ccc; /* Add a border to the comment */
        padding-left: 10px; /* Add left padding */
    }

    .user {
        font-weight: bold;
        color: #1da1f2; /* Blue color for the username */
        margin-bottom: 4px; /* Add some spacing between username and comment text */
    }

    .text {
        white-space: pre-wrap; /* Allow text to wrap within the comment box */
    }

    /* Optional: Add hover effect */
    .comment:hover {
        background-color: #e8f5fe;
    }

    .comment-input {
        margin-bottom: 20px;
        display: flex;
        align-items: center; /* Align textarea and button vertically */
    }

        .comment-input textarea {
            flex: 1; /* Take up remaining space */
            min-height: 80px;
            padding: 10px;
            border: 1px solid;
            border-radius: 5px;
            resize: vertical;
            margin-right: 10px; /* Add some spacing between textarea and button */
        }

        .comment-input button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 8px 20px;
            border-radius: 5px;
            cursor: pointer;
        }

            .comment-input button:hover {
                background-color: #0056b3;
            }
</style>