@page "/Register"
@using Services.Users
@using Data.Models
@inject IUserService userService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager Navigate
@rendermode InteractiveServer

<PageTitle>Register</PageTitle>

<div class="register-container">
    <h3>Register Page</h3>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <form @onsubmit="PerformRegister">
        <div class="form-group">
            <label for="usernameInput">Username</label>
            <input type="text" @bind="registerData.Username" class="form-control" id="usernameInput" aria-describedby="usernameHelp" placeholder="Enter Username" />
            <small id="usernameHelp" class="form-text text-muted">We'll never share this data with anyone.</small>
        </div>
        <div class="form-group">
            <label for="emailInput">Email</label>
            <input type="email" @bind="registerData.Email" class="form-control" id="emailInput" aria-describedby="emailHelp" placeholder="Enter Email" />
            <small id="emailHelp" class="form-text text-muted">We'll never share this data with anyone.</small>
        </div>
        <div class="form-group">
            <label for="passwordInput">Password</label>
            <input type="password" @bind="registerData.Hashed" class="form-control" autocomplete="on" id="passwordInput" aria-describedby="passwordHelp" placeholder="Enter Password" />
            <small id="passwordHelp" class="form-text text-muted">We'll never share this data with anyone.</small>
        </div>
        <button type="submit" class="btn btn-primary">Register</button>
        <div style="margin-top: 5%;" class="form-group">
            <label>Do you already have an account? <a href="/login">Login here</a></label>
        </div>
    </form>
</div>

<style>
    body {
        background-color: black;
    }

    .register-container {
        border-radius: 5px;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
</style>


@code {
    private User registerData = new User();
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            User? user = await sessionStorage.GetItemAsync<User>("userData");

            if (user != null)
            {
                Navigate.NavigateTo("/");
            }
        }
    }

    private void PerformRegister()
    {
        User? user = userService.GetUserByUsername(registerData.Username);

        if (user == null)
        {
            if (!String.IsNullOrEmpty(registerData.Email) || !String.IsNullOrEmpty(registerData.Hashed) || !String.IsNullOrEmpty(registerData.Username))
            {
                userService.AddUser(registerData);

                Navigate.NavigateTo("/login");
            } else
            {
                errorMessage = "Invalid account details, please fill all boxes!";
            }
            //PUSH INTO DB?
            //REDIRECT TO /LOGIN?
        }
        else
        {
            errorMessage = "An account with that username already exists!";
        }
    }
}
